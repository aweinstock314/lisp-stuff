(require 'list-lib)
(define GL2 javax.media.opengl.GL2)
(define KeyEvent java.awt.event.KeyEvent)
(define printf java.lang.System:out:printf)
(define-alias ArrayList java.util.ArrayList)

(define-macro (thunk expr) `(lambda (. ,(gentemp)) ,expr))
(define-macro (mvbind vars expr . body) `(call-with-values (thunk ,expr) (lambda ,vars ,@body)))
(define-macro (mvlist expr) `(call-with-values (thunk ,expr) list))

; this has multiple-evaluation problems, but works fine for simple cases (does kawa have get-setf-expansion?)
(define-macro (inc! var delta) `(set! ,var (+ ,var ,delta)))
(define-macro (inplace! fn var) `(set! ,var (,fn ,var)))

(define-macro (java-iterate iterable-expr varname . body)
    (define real-varname (if (list? varname) (car varname) varname))
    (define vartype (if (list? varname) (cadr varname) java.lang.Object))
    (define iterator-name (if (and (list? varname) (>= (length varname) 3)) (caddr varname) (gentemp)))
    `(let ((,iterator-name ::java.util.Iterator (invoke ,iterable-expr 'iterator))
           (,real-varname ::,vartype #!null))
        (do ()
            ((not (invoke ,iterator-name 'hasNext)) #!void)
            (set! ,real-varname (invoke ,iterator-name 'next))
            ,@body
        )
    )
)

(define (upto x) (do ((i 0 (+ i 1)) (acc '() (cons i acc))) ((= i x) (reverse! acc))))
(define (clamp lo hi) (lambda (val) (max lo (min hi val))))
(define (wrap lo hi) (lambda (val)
    (cond ((< val lo) hi)
          ((> val hi) lo)
          (else val)
    )
))
(define (constantly x) (lambda (. args) x))
(define tau (* 8 (atan 1)))
(define atan2 java.lang.Math:atan2)
(define (random x) (* x (java.lang.Math:random)))

(define-simple-class vertex ()
    (x::double 0) (y::double 0)
    ((*init*) #!void)
    ((*init* ix iy)
        (set! x ix)
        (set! y iy)
    )
    ((toString)::String (String:format "c(%f, %f)" x y))
)

(define-simple-class polar-vertex ()
    (m::double 0) (t::double 0)
    ((*init*) #!void)
    ((*init* im it)
        (set! m im)
        (set! t it)
    )
    ((toString)::String (String:format "p(%f, %f)" m t))
)

(define (cart->polar v::vertex) (polar-vertex (sqrt (+ (square v:x) (square v:y))) (atan2 v:y v:x)))
(define (polar->cart p::polar-vertex) (vertex (* p:m (cos p:t)) (* p:m (sin p:t))))
(define (cart+ v1::vertex v2::vertex) (vertex (+ v1:x v2:x) (+ v1:y v2:y)))

; returns a list of vertices of a "regular" polygon, with center at pos, first vertex at rot radians
; the radius parameter is a function to allow non-regular polygons such as isosceles triangles
(define (calc-poly pos rot radiusf sides)
    (map (lambda (i)
        (define rad (radiusf i))
        (define polyvert (polar->cart (polar-vertex rad (+ rot (* tau (/ i sides))))))
        (cart+ pos polyvert)
    ) (upto sides))
)

(define (drawPolygon gl2::GL2 color verts)
    (gl2:glBegin gl2:GL_POLYGON)
    (apply gl2:glColor3d color)
    (for-each (lambda (v::vertex)
        (gl2:glVertex2d v:x v:y)
    ) verts)
    (gl2:glEnd)
)


(module-export GL2 KeyEvent printf ArrayList thunk mvbind mvlist inc! inplace! java-iterate upto clamp wrap constantly tau atan2 random vertex polar-vertex cart->polar polar->cart cart+ calc-poly drawPolygon)
