(require "asteroids_util.scm")

(define-constant +screen-width+ 640)
(define-constant +screen-height+ 480)

(define-simple-class drawer () interface: #t
    ((draw gl2::GL2) #!abstract)
)

(define-constant +shot-color+ '(255 255 255))
(define-constant +shot-speed+ .1)
(define-constant +shot-size+ .01)

(define-simple-class shot (drawer)
    (x 0) (y 0)
    (rot 0)
    (velocity 0)
    ((*init* ix iy irot ivel)
        (set! x ix)
        (set! y iy)
        (set! rot irot)
        (set! velocity (+ ivel +shot-speed+)) ; shots start off with the ship's velocity added to the constant
    )
    ((updatePosition!)
        (set! x (+ x (* velocity (cos rot))))
        (set! y (+ y (* velocity (sin rot))))
    )
    ((draw gl2) (drawPolygon gl2 +shot-color+ (calc-poly (vertex x y) rot (constantly +shot-size+) 10)))
)

(define-constant +frames-between-shots+ 5)
(define *active-shots*::ArrayList[shot] (ArrayList))

(define-simple-class ship (drawer)
    (x 0) (y 0)
    (rot (/ tau 4))
    (velocity 0)
    (size .1)
    (color '(1 .5 0))
    (shooting-cooldown 0) ; in frames for now, probably should make more robust by handling milliseconds
    ((*init*) #!void)
    ((getVerts) (calc-poly (vertex x y) rot (lambda (i) (if (= i 0) (* 2 size) size)) 3)) ; isosceles triangle
    ((updatePosition!)
        (if (> shooting-cooldown 0) (inc! shooting-cooldown -1))
        (set! x (+ x (* velocity (cos rot))))
        (set! y (+ y (* velocity (sin rot))))
        (inplace! (wrap -1 1) x)
        (inplace! (wrap -1 1) y)
    )
    ((draw gl2::GL2) (drawPolygon gl2 color (getVerts)))
    ((shoot)
        (*active-shots*:add (shot x y rot velocity))
        (set! shooting-cooldown +frames-between-shots+)
    )
)

(define player-ship (ship))

(define jf (javax.swing.JFrame))
(jf:setSize +screen-width+ +screen-height+)
(jf:setResizable #f)
(jf:setDefaultCloseOperation javax.swing.JFrame:EXIT_ON_CLOSE)
(define glcanv (javax.media.opengl.awt.GLCanvas))

(define *currently-held-keys* (java.util.HashSet))
(define-constant +rotation-delta+ (/ tau 64))
(define-constant +velocity-delta+ .01)
(define (event-loop)
    (define-macro (key-held? key) `(*currently-held-keys*:contains (static-field KeyEvent ,key)))
    (if (key-held? 'VK_LEFT) (inc! player-ship:rot +rotation-delta+))
    (if (key-held? 'VK_RIGHT) (inc! player-ship:rot (- +rotation-delta+)))
    (if (key-held? 'VK_UP) (inc! player-ship:velocity +velocity-delta+))
    (if (key-held? 'VK_DOWN) (inc! player-ship:velocity (- +velocity-delta+)))
    (if (and (key-held? 'VK_SPACE) (= player-ship:shooting-cooldown 0)) (player-ship:shoot))
    (player-ship:updatePosition!)
    (define out-of-bounds? (complement (within? -1 1)))
    (java-iterate *active-shots* (s shot iter)
        (s:updatePosition!)
        (if (or (out-of-bounds? s:x) (out-of-bounds? s:y))
            (iter:remove))
    )
    ;(printf "pos: %s, %s\n" player-ship:x player-ship:y)
)

(define (render gl2::GL2)
    (event-loop) ; might be a good idea to move this out of render later
    (gl2:glClear gl2:GL_COLOR_BUFFER_BIT)
    (player-ship:draw gl2)
    (java-iterate *active-shots* (s shot) (s:draw gl2))
)
(glcanv:addGLEventListener (object (javax.media.opengl.GLEventListener)
    ((*init*) #!void)
    ((display drawable) (render ((drawable:getGL):getGL2)))
    ((init drawable) #!void)
    ((dispose drawable) #!void)
    ((reshape drawable x y w h) #!void)
))
(glcanv:addKeyListener (object (java.awt.event.KeyListener)
    ((keyPressed ev) 
        (*currently-held-keys*:add (ev:getKeyCode))
    )
    ((keyReleased ev)
        (*currently-held-keys*:remove (ev:getKeyCode))
    )
    ((keyTyped ev) #!void)
))
(jf:add glcanv)
(jf:setVisible #t)
(define anim (com.jogamp.opengl.util.FPSAnimator glcanv 30))
(anim:start)
